openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Badges API
  description: An API to demonstrate Swagger and Spring Boot
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
    get:
      description: get the list of all badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
  /badges/user/{username}:
    get:
      description: get badges for one user
      operationId: getUserBadges
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /applications:
    post:
      description: register your app to the gamification server
      operationId: registerApp
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiKey'
  /events:
    post:
      description: send an event to the gamification server
      operationId: sendEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: proceed
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
  /rules:
    post:
      description: add a new rule for the application
      operationId: createRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
    get:
      description: get the list of all rules
      operationId: getRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
  /rules/{id}:
    get:
      description: get one rule, by id
      operationId: getRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Rule'
  /eventTypes:
    post:
      description: add a new event type for the application
      operationId: createEventType
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/EventType'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/EventType'
    get:
      description: get the list of all event types
      operationId: getEventTypes
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventType'
  /eventTypes/{id}:
      get:
        description: get one event type, by id
        operationId: getEventType
        parameters:
          - in: path
            name: id
            schema:
              type: integer
            required: true
        responses:
          '200':
            description: success
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/EventType'


components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Badge:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        experienceValue:
          type: integer
    Application:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ApiKey:
      type: object
      properties:
        uuid:
          type: string
    Event:
      type: object
      properties:
        username:
          type: string
        eventTypeId:
          type: integer
          format: int64
    Rule:
      type: object
      properties:
        id:
          type: integer
          format: int64
        eventTypeId:
          type: integer
          format: int64
        threshold:
          type: integer
        badgeId:
          type: integer
    EventType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        initialValue:
          type: integer


